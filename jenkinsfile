pipeline{
    agent any
    parameters{
        booleanParam(name:'RELEASE',defaultValue:false,description:'Is this a Release Candidate')
    }
    environment {
        JAVA_HOME = 'C:/Program Files/Java/jdk-17'
        RELEASE_VERSION='1.1.0'
        INT_VERSION = 'R2'
    }
    stages {
        stage('Audit'){
            steps{
                auditTools()
            }
        }
        stage('Checkout') {
            steps{
                script {
                    def gitUrl = 'https://github.com/AddwinFernando/JUNIT-Jacoco-Practoce.git'
            checkout(
                [
                    $class:'GitSCM',
                    branches:[[name:'*/master']],
                    userRemoteConfigs:[[url:gitUrl]],
                    extensions:[[$class:'CleanBeforeCheckout'],[$class:'CloneOption',noTags:false,shallow:true]]
                ]
            )
                }
            }
        }
        // stage('Clean'){
        //     steps{
        //         bat 'mvn clean'
        //     }
        // }
        stage('Build') {
            environment{
                VERSION_SUFFIX = getBuildVersion();
            }
            steps{
                echo "Building version: ${INT_VERSION} with suffix: ${VERSION_SUFFIX}"
                packageApplication()
            }
        }
        stage('Test') {
            steps{
                bat 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage("Pubish"){
            when{
                expression {return params.RELEASE}
            }
            steps {
                archiveArtifacts('**/*.jar')
            }
        }
    }

    post {
        success {
            echo 'Pipline Succeeded'
        }
        failure {
            echo 'Pipline Failed'
        }
    }
}

String getBuildVersion() {
    if (params.RELEASE) {
        return env.RELEASE_VERSION + ':' + env.BUILD_NUMBER
    } else {
        return env.INT_VERSION + '+ci:' + env.BUILD_NUMBER
    }
}

void auditTools() {
    bat '''
        git version
        java -version
        mvn -version
    '''
}

void packageApplication() {
    bat '''
        mvn versions:set -DnewVersion="%VERSION_SUFFIX%-SNAPSHOT"
        mvn versions:update-child-modules
        mvn package
    '''
}
